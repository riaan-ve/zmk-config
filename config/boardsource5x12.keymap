/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
 
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>


/ {

    behaviors {
    
        tdn5: tap_dance_n5 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_N5";
            #binding-cells = <0>;
            tapping-term-ms = <180>;
            bindings = <&kp N5>, <&kp PRCNT>;
        };
        
        tdn6: tap_dance_n6 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_N6";
            #binding-cells = <0>;
            tapping-term-ms = <180>;
            bindings = <&kp N6>, <&kp CARET>;
        };
        
        tdn7: tap_dance_n7 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_N7";
            #binding-cells = <0>;
            tapping-term-ms = <180>;
            bindings = <&kp N7>, <&kp AMPS>;
        };
        
        tdn8: tap_dance_n8 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_N8";
            #binding-cells = <0>;
            tapping-term-ms = <180>;
            bindings = <&kp N8>, <&kp ASTRK>;
        };
        
        tdn9: tap_dance_n9 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_N9";
            #binding-cells = <0>;
            tapping-term-ms = <180>;
            bindings = <&kp N9>, <&kp LPAR>;
        };
        
        tdn0: tap_dance_n0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_N0";
            #binding-cells = <0>;
            tapping-term-ms = <180>;
            bindings = <&kp N0>, <&kp RPAR>;
        };
        
        tdlshft: tap_dance_lshft {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_LSHFT";
            #binding-cells = <0>;
            tapping-term-ms = <180>;
            bindings = <&kp LSHFT>, <&kp CAPS>;
        };
        
        tdminus: tap_dance_minus {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_MINUS";
            #binding-cells = <0>;
            tapping-term-ms = <180>;
            bindings = <&kp MINUS>, <&kp UNDER>;
        };
        
        tdequal: tap_dance_equal {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_EQUAL";
            #binding-cells = <0>;
            tapping-term-ms = <180>;
            bindings = <&kp EQUAL>, <&kp PLUS>;
        };
        
        tdlbkt: tap_dance_lbkt {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_LBKT";
            #binding-cells = <0>;
            tapping-term-ms = <180>;
            bindings = <&kp LBKT>, <&kp LBRC>;
        };
        
        tdrbkt: tap_dance_rbkt {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_RBKT";
            #binding-cells = <0>;
            tapping-term-ms = <180>;
            bindings = <&kp RBKT>, <&kp RBRC>;
        };
        
        tdfslh: tap_dance_fslh {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_FSLH";
            #binding-cells = <0>;
            tapping-term-ms = <180>;
            bindings = <&kp FSLH>, <&kp QMARK>;
        };
        
        tdbslh: tap_dance_bslh {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_BSLH";
            #binding-cells = <0>;
            tapping-term-ms = <180>;
            bindings = <&kp BSLH>, <&kp PIPE>;
        };
        
        tdgrave: tap_dance_grave {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_GRAVE";
            #binding-cells = <0>;
            tapping-term-ms = <380>;
            bindings = <&kp GRAVE>, <&kp TILDE>;
        };
        
        tdcomma: tap_dance_comma {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_COMMA";
            #binding-cells = <0>;
            tapping-term-ms = <180>;
            bindings = <&kp COMMA>, <&kp LT>;
        };
        
        tddot: tap_dance_dot {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_DOT";
            #binding-cells = <0>;
            tapping-term-ms = <180>;
            bindings = <&kp DOT>, <&kp GT>;
        };
        
        tdsqt: tap_dance_sqt {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_SQT";
            #binding-cells = <0>;
            tapping-term-ms = <180>;
            bindings = <&kp APOS>, <&kp DQT>;
        };
        
        tdsemi: tap_dance_semi {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_SEMI";
            #binding-cells = <0>;
            tapping-term-ms = <180>;
            bindings = <&kp SEMI>, <&kp COLON>;
        };
        
        tdvoldn: tap_dance_voldn {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_VOLDN";
            #binding-cells = <0>;
            tapping-term-ms = <180>;
            bindings = <&kp C_VOL_DN>, <&kp C_MUTE>;
        };
    };

    macros {
        ctrl_alt_del: ctrl_alt_del {
            label = "ZM_ctrl_alt_del";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press   &kp LCTRL &kp LALT &kp DEL>
                , <&macro_release &kp LCTRL &kp LALT &kp DEL>
                ;
        };
        
        ctrl_shift_esc: ctrl_shift_esc {
            label = "ZM_ctrl_shift_esc";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press   &kp LCTRL &kp LSHIFT &kp ESC>
                , <&macro_release &kp LCTRL &kp LSHIFT &kp ESC>
                ;
        };
        
        lgui_d: lgui_d {
            label = "ZM_lgui_d";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press   &kp LGUI &kp D>
                , <&macro_release &kp LGUI &kp D>
                ;
        };
        
        lgui_shft_s: lgui_shft_s{
            label = "ZM_lgui_shft_s";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press   &kp LGUI &kp LSHFT &kp S>
                , <&macro_release &kp LGUI &kp LSHFT &kp S>
                ;
        };
        
        lgui_e: lgui_e {
            label = "ZM_lgui_e";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press   &kp LGUI &kp E>
                , <&macro_release &kp LGUI &kp E>
                ;
        };
  };
    
    keymap {
        compatible = "zmk,keymap";
        
        default_layer {
            // ------------------------------------------------------------------------------------------
            // |  ESC  |  1*  |  2*  |  3*  |     4*    |   5*  |   6*   |    7*    |  8*  |  9*  |   0*  | BSPC  |
            // |  TAB  |  Q   |  W   |  E   |     R     |   T   |   Y    |    U     |  I   |  O   |   P   |   '*  |
            // |   `*  |  A   |  S   |  D   |     F     |   G   |   H    |    J     |  K   |  L   |   ;*  | ENTER |
            // | SHIFT |  Z   |  X   |  C   |     V     |   B   |   N    |    M     |  ,*  |  .*  | UARW  |  /*   |
            // | LCTL  | LGUI | LALT | LOWR | 2uSpace(a)|4uSpace|  N/A** |2uSpace(b)| RAIS | LARW | DARW  | RARW  |


            bindings = <
                &kp ESC    &kp N1       &kp N2      &kp N3   &kp N4     &tdn5       &tdn6       &tdn7      &tdn8       &tdn9       &tdn0       &kp BSPC
                &kp TAB    &kp Q        &kp W       &kp E    &kp R      &kp T       &kp Y       &kp U      &kp I       &kp O       &kp P       &tdsqt
                &tdgrave   &kp A        &kp S       &kp D    &kp F      &kp G       &kp H       &kp J      &kp K       &kp L       &tdsemi     &kp RET
                &kp LSHFT  &kp Z        &kp X       &kp C    &kp V      &kp B       &kp N       &kp M      &tdcomma    &tddot      &kp UP      &tdfslh
                &kp LCTRL  &kp LGUI     &kp LALT    &mo 1    &kp SPACE  &kp SPACE   &kp SPACE   &kp SPACE  &mo 2       &kp LEFT    &kp DOWN    &kp RIGHT 
            >;
        };

        lower_layer {
            // -------------------------------------------------------------------------------------------
            // |  F11   |   F1  |  F2   |  F3   |  F4      |  F5   |  F6    |   F7     |  F8  |  F9  |  F10  |  F12  |
            // |        |  INS  |  HOME | PG UP | File Exp*|       |        |          |      |      |  -*   |  =*   |
            // | win+d* |  DEL  |  END  | PG DN |          |       |        |          |      |      |       |       |
            // |  CAPS  |       |       |       |          |       |        |          |  [*  |  ]*  |       |   \*  |
            // |        |       |       | LOWR  |2uSpace(a)|4uSpace|  N/A** |2uSpace(b)| RAIS |      |       |       |
            bindings = <
                &kp F11    &kp F1      &kp F2      &kp F3    &kp F4     &kp F5      &kp F6      &kp F7       &kp F8    &kp F9     &kp F10    &kp F12
                &none      &kp INS     &kp HOME    &kp PG_UP &lgui_e    &none       &none       &none        &none     &none      &tdminus   &tdequal
                &lgui_d    &kp DEL     &kp END     &kp PG_DN &none      &none       &none       &none        &none     &none      &none      &none
                &kp CAPS   &none       &none       &none     &none      &none       &none       &none        &tdlbkt   &tdrbkt    &none      &tdbslh
                &none      &none       &none       &mo 1     &kp SPACE  &kp SPACE   &kp SPACE   &kp SPACE    &mo 2     &none      &none      &none
            >;
        };

        raise_layer {
            // ------------------------------------------------------------------------------------------
            // | PSCRN*| PSCRN |       |       |          |BT_NXT | BT_CLR |          |      |      |        |    DEL   |
            // | C_S_E |   7   |   8   |   9   |          |       |        |          |      |   +  |   -*   |     =*   |
            // |       |   4   |   5   |   6   |          |       |        |          |      |   /  |   *    | KP ENTER |
            // |       |   1   |   2   |   3   |          |       |        |          |  [*  |  ]*  | VOL UP |    \*    |
            // | C_A_D |   .   |   0   | LOWR  |2uSpace(a)|4uSpace|  N/A** |2uSpace(b)| RAIS | PREV | VOL DN*|   NEXT   |
            bindings = <
                &lgui_shft_s    &kp PSCRN     &none      &none      &bt BT_NXT &bt BT_CLR   &none       &none        &none     &none         &none            &kp DEL
                &ctrl_shift_esc &kp KP_N7     &kp KP_N8  &kp KP_N9  &none      &none        &none       &none        &none     &kp KP_PLUS   &tdminus         &tdequal
                &none           &kp KP_N4     &kp KP_N5  &kp KP_N6  &none      &none        &none       &none        &none     &kp KP_DIVIDE &kp KP_MULTIPLY  &kp KP_ENTER
                &none           &kp KP_N1     &kp KP_N2  &kp KP_N3  &none      &none        &none       &none        &tdlbkt   &tdrbkt       &kp C_VOL_UP     &tdbslh
                &ctrl_alt_del   &kp KP_DOT    &kp KP_N0  &mo 1      &kp SPACE  &kp SPACE    &kp SPACE   &kp SPACE    &mo 2     &kp C_PREV    &tdvoldn         &kp C_NEXT
            >;
        };

        adjust_layer_mo3 {
            // -----------------------------------------------------------------------------------------------
            // |      |       |       |       |          |       |        |          |       |       |       |       |
            // |      |       |       |       |          |       |        |          |       |       |       |       |
            // |      |       |       |       |          |       |        |          |       |       |       |       |
            // |      |       |       |       |          |       |        |          |       |       |       |       |
            // |      |       |       |       |2uSpace(a)|4uSpace|  N/A** |2uSpace(b)|       |       |       |       |
            bindings = <
                &none    &none    &none    &none    &none    &none    &none    &none    &none    &none    &none    &none 
                &none    &none    &none    &none    &none    &none    &none    &none    &none    &none    &none    &none 
                &none    &none    &none    &none    &none    &none    &none    &none    &none    &none    &none    &none 
                &none    &none    &none    &none    &none    &none    &none    &none    &none    &none    &none    &none 
                &none    &none    &none    &none    &none    &none    &none    &none    &none    &none    &none    &none 
            >;
        };

        lost_layer_mo4 {
            // -----------------------------------------------------------------------------------------------
            // |      |       |       |       |          |       |        |          |       |       |       |       |
            // |      |       |       |       |          |       |        |          |       |       |       |       |
            // |      |       |       |       |          |       |        |          |       |       |       |       |
            // |      |       |       |       |          |       |        |          |       |       |       |       |
            // |      |       |       |       |2uSpace(a)|4uSpace|  N/A** |2uSpace(b)|       |       |       |       |
            bindings = <
                &none    &none    &none    &none    &none    &none    &none    &none    &none    &none    &none    &none    
                &none    &none    &none    &none    &none    &none    &none    &none    &none    &none    &none    &none 
                &none    &none    &none    &none    &none    &none    &none    &none    &none    &none    &none    &none 
                &none    &none    &none    &none    &none    &none    &none    &none    &none    &none    &none    &none 
                &none    &none    &none    &none    &none    &none    &none    &none    &none    &none    &none    &none 
            >;
        };
    };
};
